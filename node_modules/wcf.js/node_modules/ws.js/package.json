{
  "name": "ws.js",
  "version": "0.0.19",
  "description": "WS-* implementation for node",
  "engines": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Yaron Naveh",
    "url": "yaronn01@gmail.com, http://webservices20.blogspot.com/"
  },
  "dependencies": {
    "bufferjs": ">= 1.0.2",
    "formidable": "=1.0.9",
    "request": ">=2.9.100",
    "xmldom": "=0.1.7",
    "dateformat": ">=1.0.2-1.2.3",
    "xml-crypto": ">=0.0.4"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaronn/ws-js.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "nodeunit ./test/unit ./test/unit/client ./test/integration/client/signature.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "keywords": [
    "ws-security",
    "mtom",
    "ws-addressing",
    "ws-star",
    "ws-*",
    "web service standards",
    "wsdl",
    "soap"
  ],
  "licenses": [
    {
      "type": "MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## WS.JS\r\nA WS-* client stack for node.js. Written in pure javascript!\r\n\r\n**Currently supports:**\r\n\r\n* MTOM\r\n* WS-Security (username tokens, x.509 digital signature)\r\n* WS-Addressing (all versions)\r\n* HTTP(S)\r\n\r\nFor more information visit [my blog](http://webservices20.blogspot.com/) or [my twitter](https://twitter.com/YaronNaveh).\r\n\r\n## Install\r\nInstall with [npm](http://github.com/isaacs/npm):\r\n\r\n    npm install ws.js\r\n\r\n## Usage\r\n\r\n### WS-Security (Username)\r\n`````javascript\r\n    var ws = require('ws.js')\r\n      , Http = ws.Http\r\n      , Security = ws.Security\r\n      , UsernameToken = ws.UsernameToken\r\n\r\n    var request =  '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\">' +\r\n                      '<Header />' +\r\n                        '<Body>' +\r\n                          '<EchoString xmlns=\"http://tempuri.org/\">' +\r\n                            '<s>123</s>' +\r\n                          '</EchoString>' +\r\n                        '</Body>' +\r\n                    '</Envelope>'\r\n\r\n    var ctx =  { request: request \r\n               , url: \"http://service/security\"\r\n               , action: \"http://tempuri.org/EchoString\"\r\n               , contentType: \"text/xml\" \r\n               }\r\n\r\n\r\n    var handlers =  [ new Security({}, [new UsernameToken({username: \"yaron\", password: \"1234\"})])\r\n                    , new Http()\r\n                    ]\r\n\r\n    ws.send(handlers, ctx, function(ctx) {                    \r\n      console.log(\"response: \" + ctx.response);\r\n    })\r\n`````\r\n==>\r\n`````xml\r\n    <Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:u=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\r\n    <Header>\r\n      <o:Security>\r\n        <u:Timestamp>\r\n          <u:Created>2012-02-26T11:03:40Z</u:Created>\r\n          <u:Expires>2012-02-26T11:08:40Z</u:Expires>\r\n        </u:Timestamp>\r\n        <o:UsernameToken>\r\n          <o:Username>yaron</o:Username>\r\n          <o:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">1234</o:Password>\r\n        </o:UsernameToken>\r\n      </o:Security>\r\n    </Header>\r\n    <Body>\r\n      <EchoString xmlns=\"http://tempuri.org/\">\r\n        <s>123</s>\r\n      </EchoString>\r\n    </Body>\r\n  </Envelope>\r\n`````\r\n\r\n### WS-Security (digital signature)\r\n`````javascript\r\nvar ws = require('ws.js')\r\n, fs = require('fs')\r\n, sec = ws.Security\r\n, X509BinarySecurityToken = ws.X509BinarySecurityToken\r\n, FileKeyInfo = require('xml-crypto').FileKeyInfo  \r\n\r\nvar x509 = new X509BinarySecurityToken(\r\n  { \"key\": fs.readFileSync(\"client.pem\").toString()})\r\nvar signature = new ws.Signature(x509)\r\nsignature.addReference(\"//*[local-name(.)='Body']\")    \r\nsignature.addReference(\"//*[local-name(.)='Timestamp']\")    \r\n\r\nvar sec = new ws.Security({}, [ x509, signature ])\r\n\r\nvar handlers =  [ new ws.Addr(\"http://www.w3.org/2005/08/addressing\")\r\n                , sec\r\n                , new ws.Http()\r\n                ]\r\n\r\nrequest = \"<Envelope xmlns='http://schemas.xmlsoap.org/soap/envelope/'>\" +\r\n          \"<Header />\" +\r\n            \"<Body>\" +\r\n              \"<GetData xmlns='http://tempuri.org/'>\" +\r\n                \"<value>123</value>\" +\r\n              \"</GetData>\" +\r\n            \"</Body>\" +\r\n          \"</Envelope>\"\r\n\r\nvar ctx =   { request: request\r\n  , url: \"http://localhost:7171/Service/signature\"\r\n  , action: \"http://tempuri.org/IService/GetData\"\r\n  , contentType: \"text/xml\"\r\n}\r\n\r\nws.send(handlers, ctx, function(ctx) {                    \r\n  console.log(\"status \" + ctx.statusCode)\r\n  console.log(\"messagse \" + ctx.response)\r\n})  \r\n`````\r\n\r\n==>\r\n`````xml\r\n<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://www.w3.org/2005/08/addressing\" xmlns:u=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" xmlns:o=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">\r\n  <Header>\r\n    <ws:Action>http://tempuri.org/IService/GetData</ws:Action>\r\n    <ws:To>http://localhost:8888/</ws:To>\r\n    <ws:MessageID>ca62b7d7-4f74-75ed-9f5c-b09b173f6747</ws:MessageID>\r\n    <ws:ReplyTo>\r\n      <ws:Address>http://www.w3.org/2005/08/addressing/role/anonymous</ws:Address>\r\n    </ws:ReplyTo>\r\n    <o:Security>\r\n      <u:Timestamp xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"_1\">\r\n        <u:Created>2012-05-25T12:18:38Z</u:Created>\r\n        <u:Expires>2012-05-25T12:23:38Z</u:Expires>\r\n      </u:Timestamp>\r\n      <o:BinarySecurityToken ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\" u:Id=\"sec_0\">MIIBxDCCAW6gAwIBAgIQxUSXFzWJYYtOZnmmuOMKkjANBgkqhkiG9w0BAQQFADAWMRQwEgYDVQQDEwtSb290IEFnZW5jeTAeFw0wMzA3MDgxODQ3NTlaFw0zOTEyMzEyMzU5NTlaMB8xHTAbBgNVBAMTFFdTRTJRdWlja1N0YXJ0Q2xpZW50MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC+L6aB9x928noY4+0QBsXnxkQE4quJl7c3PUPdVu7k9A02hRG481XIfWhrDY5i7OEB7KGW7qFJotLLeMec/UkKUwCgv3VvJrs2nE9xO3SSWIdNzADukYh+Cxt+FUU6tUkDeqg7dqwivOXhuOTRyOI3HqbWTbumaLdc8jufz2LhaQIDAQABo0swSTBHBgNVHQEEQDA+gBAS5AktBh0dTwCNYSHcFmRjoRgwFjEUMBIGA1UEAxMLUm9vdCBBZ2VuY3mCEAY3bACqAGSKEc+41KpcNfQwDQYJKoZIhvcNAQEEBQADQQAfIbnMPVYkNNfX1tG1F+qfLhHwJdfDUZuPyRPucWF5qkh6sSdWVBY5sT/txBnVJGziyO8DPYdu2fPMER8ajJfl</o:BinarySecurityToken>\r\n      <Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\">\r\n        <SignedInfo>\r\n          <CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\r\n          <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" />\r\n          <Reference URI=\"#_0\">\r\n            <Transforms>\r\n              <Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\r\n            </Transforms>\r\n            <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" />\r\n            <DigestValue>fxQc0PEh2GHA43IXltm6gjbccsA=</DigestValue>\r\n          </Reference>\r\n          <Reference URI=\"#_1\">\r\n            <Transforms>\r\n              <Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\" />\r\n            </Transforms>\r\n            <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\" />\r\n            <DigestValue>L+vrfEszbn2ZtXiWfNyDG8nM1e8=</DigestValue>\r\n          </Reference>\r\n        </SignedInfo>\r\n        <SignatureValue>AcOb1KJHpyQnnChEZFKaIjVag8iREL7g+LEXnvHQ/wH9ffIj0s1sdF2xO2AvQkqLUeefIEPgyiKUPR9sk8RMchJxv7UDx8wGuvD2WFPbd3yy50qcsu2UkiUm0lW/R3lpv88w83Z95LFZ1yq1MnOe2Sh0y5esoCbJo1fJETS8mQ0=</SignatureValue>\r\n        <KeyInfo>\r\n          <o:SecurityTokenReference>\r\n            <o:Reference URI=\"#sec_0\" ValueType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3\" />\r\n          </o:SecurityTokenReference>\r\n        </KeyInfo>\r\n      </Signature>\r\n    </o:Security>\r\n  </Header>\r\n  <Body xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"_0\">\r\n    <GetData xmlns=\"http://tempuri.org/\">\r\n      <value>123</value>\r\n    </GetData>\r\n  </Body>\r\n</Envelope>\r\n`````\r\n\r\n**Notes:**\r\n\r\nBy default incoming signatures are not validates. To validate these signatures when you create the security channel specify the validateResponseSignature parameter:\r\n\r\n`````javascript\r\nvar sec = new ws.Security({\"validateResponseSignature\": true} ...\r\n`````\r\n\r\nNext specify the server certificate (the public key corresponding to the server private sgining key):\r\n\r\n`````javascript\r\nsec.options.responseKeyInfoProvider = new FileKeyInfo(\"./examples/server_public.pem\")\r\n`````\r\n\r\nIn the future the server certificate will be extracted from the BinarySecurityToken automatically (when available).\r\n\r\n### MTOM    \r\n`````javascript\r\n    var ws = require('ws.js')\r\n      , Http = ws.Http\r\n      , Mtom = ws.Mtom\r\n\r\n    var request = '<s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\">' +\r\n                    '<s:Body>' +\r\n                      '<EchoFiles xmlns=\"http://tempuri.org/\">' +                        \r\n                          '<File1 />' +\r\n                      '</EchoFiles>' +\r\n                    '</s:Body>' +\r\n                  '</s:Envelope>'   \r\n    \r\n    var ctx = { request: request\r\n              , contentType: \"application/soap+xml\"\r\n              , url: \"http://localhost:7171/Service/mtom\"\r\n              , action: \"http://tempuri.org/IService/EchoFiles\"\r\n              }\r\n\r\n    //add attachment to the soap request\r\n    ws.addAttachment(ctx, \"request\", \"//*[local-name(.)='File1']\", \r\n                    \"me.jpg\", \"image/jpeg\")\r\n    \r\n    var handlers =  [ new Mtom()\r\n                    , new Http()\r\n                    ];\r\n    \r\n    ws.send(handlers, ctx, function(ctx) {      \r\n      //read an attachment from the soap response\r\n      var file = ws.getAttachment(ctx, \"response\", \"//*[local-name(.)='File1']\")\r\n      fs.writeFileSync(\"result.jpg\", file)      \r\n    })\r\n`````\r\n==>\r\n`````xml\r\n    --my_unique_boundary\r\n    Content-ID: <part0>\r\n    Content-Transfer-Encoding: 8bit\r\n    Content-Type: application/xop+xml;charset=utf-8;type=\"application/soap+xml\"\r\n\r\n    <s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\">\r\n      <s:Body>\r\n        <EchoFiles xmlns=\"http://tempuri.org/\">\r\n          <File1>\r\n            <xop:Include xmlns:xop=\"http://www.w3.org/2004/08/xop/include\" href=\"cid:part1\" />\r\n          </File1>\r\n        </EchoFiles>\r\n      </s:Body>\r\n      <s:Header />\r\n    </s:Envelope>\r\n    --my_unique_boundary\r\n    Content-ID: <part1>\r\n    Content-Transfer-Encoding: binary\r\n    Content-Type: image/jpeg\r\n\r\n    [binary here...]\r\n`````\r\n### WS-Addressing\r\n`````javascript\r\n    var ws = require('ws.js')\r\n      , Http = ws.Http\r\n      , Addr = ws.Addr\r\n      , ctx =  { request:   \"<Envelope xmlns='http://schemas.xmlsoap.org/soap/envelope/'>\" +\r\n                              \"<Header />\" +\r\n                                \"<Body>\" +\r\n                                  \"<EchoString xmlns='http://tempuri.org/'>\" +\r\n                                    \"<s>123</s>\" +\r\n                                  \"</EchoString>\" +\r\n                                \"</Body>\" +\r\n                            \"</Envelope>\"\r\n\r\n               , url: \"http://localhost/service\"\r\n               , action: \"http://tempuri.org/EchoString\"\r\n               , contentType: \"text/xml\" \r\n               }\r\n\r\n    var handlers =  [ new Addr(\"http://schemas.xmlsoap.org/ws/2004/08/addressing\")\r\n                    , new Http()\r\n                    ]\r\n\r\n    ws.send(handlers, ctx, function(ctx) {                    \r\n      console.log(\"response: \" + ctx.response);\r\n    })\r\n`````\r\n==>\r\n`````xml\r\n    <Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ws=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\">\r\n      <Header>\r\n        <ws:Action>http://tempuri.org/EchoString</ws:Action>\r\n        <ws:To>http://server/wsa/</ws:To>\r\n        <ws:MessageID>6c4189e5-60f5-195e-b7ce-4e236d63c379</ws:MessageID>\r\n        <ws:ReplyTo>\r\n          <ws:Address>http://schemas.xmlsoap.org/ws/2004/08/addressing/role/anonymous</ws:Address>\r\n        </ws:ReplyTo>\r\n      </Header>\r\n      <Body>\r\n        <EchoString xmlns=\"http://tempuri.org/\">\r\n          <s>123</s>\r\n        </EchoString>\r\n      </Body>\r\n    </Envelope>\r\n`````\r\n### SSL\r\nJust specify an http**s** address in any of the previous samples.\r\n\r\n### All together now\r\n`````javascript\r\n    var ws = require('ws.js')\r\n      , Http = ws.Http\r\n      , Addr = ws.Addr\r\n      , Mtom = ws.Mtom\r\n      , Security = ws.Security\r\n      , UsernameToken = ws.UsernameToken\r\n      , ctx =  { request:   \"<Envelope xmlns='http://schemas.xmlsoap.org/soap/envelope/'>\" +\r\n                              \"<Header />\" +\r\n                                \"<Body>\" +\r\n                                  \"<EchoString xmlns='http://tempuri.org/'>\" +\r\n                                    \"<File1 />\" +\r\n                                  \"</EchoString>\" +\r\n                                \"</Body>\" +\r\n                            \"</Envelope>\"\r\n\r\n               , url: \"https://localhost/service\"\r\n               , action: \"http://tempuri.org/EchoString\"\r\n               , contentType: \"text/xml\" \r\n               }\r\n\r\n    ws.addAttachment(ctx, \"request\", \"//*[local-name(.)='File1']\", \r\n                      \"me.jpg\", \"image/jpeg\")\r\n\r\n    var handlers =  [ new Security({}, [new UsernameToken({username: \"yaron\", password: \"1234\"})])\r\n                    , new Addr(\"http://ws-addressing/v8\")\r\n                    , new Mtom() //Mtom must be after everything except http\r\n                    , new Http()\r\n                    ]\r\n\r\n    ws.send(handlers, ctx, function(ctx) {                    \r\n      console.log(\"response: \" + ctx.response);\r\n    })\r\n`````\r\n\r\n### License\r\nThis software is licensed udner the **MIT license**.\r\n\r\nCopyright (C) 2012 Yaron Naveh ([mail](mailto:yaronn01@gmail.com), [blog](http://webservices20.blogspot.com/))\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n### More details\r\n* [http://webservices20.blogspot.com/](http://webservices20.blogspot.com/)\r\n* Or drop me an [email](mailto:yaronn01@gmail.com)\r\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/yaronn/ws.js/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/yaronn/ws-js/issues"
  },
  "_id": "ws.js@0.0.19",
  "dist": {
    "shasum": "4a1aea8bc991f721b643518697f3dcdf31e8f5fc"
  },
  "_from": "ws.js@>= 0.0.15",
  "_resolved": "https://registry.npmjs.org/ws.js/-/ws.js-0.0.19.tgz"
}
