{
  "name": "wcf.js",
  "version": "0.0.6",
  "description": "A WCF-compatible web services client stack for node.js",
  "engines": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Yaron Naveh",
    "url": "yaronn01@gmail.com, http://webservices20.blogspot.com/"
  },
  "dependencies": {
    "ws.js": ">= 0.0.15",
    "xml-crypto": ">=0.0.4"
  },
  "devDependencies": {
    "nodeunit": ">=0.6.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaronn/wcf.js.git"
  },
  "main": "./index.js",
  "directories": {
    "lib": "./lib"
  },
  "keywords": [
    "wcf",
    "BasicHttpBinding",
    "WSHttpBinding",
    "CustomBinding",
    "ws-security",
    "mtom",
    "ws-addressing",
    "ws-star",
    "ws-*",
    "web service standards",
    "wsdl",
    "soap"
  ],
  "licenses": [
    {
      "type": "MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "## WCF.JS\r\nA WCF-compatible web service client stack for node.js. Written in pure javascript!\r\n\r\n**Imagine this:**\r\n    \r\n    var binding = new WSHttpBinding(\r\n          { MessageEncoding: \"Mtom\"\r\n          , SecurityMode:\"TransportWithMessageCredential\"\r\n          })\r\n      , proxy = new Proxy(binding)      \r\n\r\n    proxy.ClientCredentials.Username.Username = \"yaron\";\r\n    proxy.ClientCredentials.Username.Password = \"1234\";\r\n\r\n    proxy.send(message, function(response) {\r\n      console.log(response)\r\n    });\r\n\r\n(See below for a complete working sample)\r\n\r\n**Currently supports a subset of:**\r\n\r\n* BasicHttpBinding\r\n* WSHttpBinding\r\n* CustomBinding\r\n\r\n**The current subset includes:**\r\n\r\n* MTOM / Text encodings\r\n* WS-Addressing (all versions)\r\n* Transport Security (SSL)\r\n* TransportWithMessageCredential (Username)\r\n* Message security where ClientCredentialType is Certificate (signature only, without encryption)\r\n\r\nFor more information visit my [wcf blog](http://webservices20.blogspot.com/).\r\n\r\n## Install\r\nInstall with [npm](http://github.com/isaacs/npm):\r\n\r\n    npm install wcf.js\r\n\r\n## Usage\r\n\r\n### BasicHttpBinding (TransportWithMessageCredential)\r\n```````````````````````````````````javascript\r\n    var BasicHttpBinding = require('wcf.js').BasicHttpBinding\r\n      , Proxy = require('wcf.js').Proxy\r\n      , binding = new BasicHttpBinding(\r\n            { SecurityMode: \"TransportWithMessageCredential\"\r\n            , MessageClientCredentialType: \"UserName\"\r\n            })\r\n      , proxy = new Proxy(binding, \"http://localhost:7171/Service/clearUsername\")\r\n      , message =  \"<Envelope xmlns='http://schemas.xmlsoap.org/soap/envelope/'>\" +\r\n                     \"<Header />\" +\r\n                       \"<Body>\" +\r\n                         \"<GetData xmlns='http://tempuri.org/'>\" +\r\n                           \"<value>123</value>\" +\r\n                         \"</GetData>\" +\r\n                        \"</Body>\" +\r\n                   \"</Envelope>\"\r\n\r\n    proxy.ClientCredentials.Username.Username = \"yaron\"\r\n    proxy.ClientCredentials.Username.Password = \"1234\"\r\n\r\n    proxy.send(message, \"http://tempuri.org/IService/GetData\", function(response, ctx) {\r\n      console.log(response)\r\n    });\r\n```````````````````````````````````\r\n\r\n### CustomBinding (Mtom + UserNameOverTransport + WSAddressing10)\r\n```````````````javascript\r\n    var CustomBinding = require('wcf.js').CustomBinding\r\n      , MtomMessageEncodingBindingElement = require('wcf.js').MtomMessageEncodingBindingElement\r\n      , HttpTransportBindingElement = require('wcf.js').HttpTransportBindingElement\r\n      , SecurityBindingElement = require('./lib/proxies/wcf.js').SecurityBindingElement\r\n      , Proxy = require('wcf.js').Proxy\r\n      , fs = require('fs')\r\n      , binding = new CustomBinding(\r\n            [ new SecurityBindingElement({AuthenticationMode: \"UserNameOverTransport\"})\r\n            , new MtomMessageEncodingBindingElement({MessageVersion: \"Soap12WSAddressing10\"}),\r\n            , new HttpTransportBindingElement()\r\n            ])\r\n      , proxy = new Proxy(binding, \"http://localhost:7171/Service/mtom\")\r\n      , message = '<s:Envelope xmlns:s=\"http://www.w3.org/2003/05/soap-envelope\">' +\r\n                    '<s:Header />' +\r\n                      '<s:Body>' +\r\n                        '<EchoFiles xmlns=\"http://tempuri.org/\">' +\r\n                          '<value xmlns:a=\"http://schemas.datacontract.org/2004/07/\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">' +\r\n                            '<a:File1 />' +\r\n                            '<a:File2 />' +\r\n                          '</value>' +\r\n                        '</EchoFiles>' +\r\n                      '</s:Body>' +\r\n                  '</s:Envelope>'  \r\n\r\n    proxy.addAttachment(\"//*[local-name(.)='File1']\", \"me.jpg\");\r\n    proxy.addAttachment(\"//*[local-name(.)='File2']\", \"stuff.txt\");\r\n\r\n    proxy.ClientCredentials.Username.Username = \"yaron\";\r\n    proxy.ClientCredentials.Username.Password = \"1234\";\r\n\r\n    proxy.send(message, \"http://tempuri.org/IService/EchoFiles\", function(response, ctx) {\r\n      console.log(response);\r\n      //read an mtom attachment from the soap response\r\n      var file = proxy.getAttachment(\"//*[local-name(.)='File1']\")\r\n      fs.writeFileSync(\"result.jpg\", file)      \r\n    });\r\n``````````\r\n\r\n### CustomBinding with message level signature\r\n```````````````javascript\r\n    var wcf = require('wcf.js')    \r\n      , fs = require(\"fs\")\r\n\r\n    var sec = new wcf.SecurityBindingElement({ AuthenticationMode: \"MutualCertificate\"\r\n      , ValidateResponseSignature: true})\r\n      , binding = new wcf.CustomBinding(\r\n      [ sec\r\n      , new wcf.TextMessageEncodingBindingElement({MessageVersion: \"Soap11WSAddressing10\"})\r\n      , new wcf.HttpTransportBindingElement()\r\n      ])\r\n\r\n    var proxy = new wcf.Proxy(binding, \"http://localhost:7171/Service/sign_body_timestamp_wsa\")\r\n    proxy.ClientCredentials.ClientCertificate.Certificate = \r\n            fs.readFileSync(\"client.pem\").toString()\r\n    proxy.ClientCredentials.ServiceCertificate.DefaultCertificate = \r\n            fs.readFileSync(\"server_public.pem\").toString()    \r\n\r\n    var version = proxy.binding.getCustomBinding().getContentType() \r\n      , ns = version==\"text/xml\" ? \r\n        \"http://schemas.xmlsoap.org/soap/envelope/\" : \r\n        \"http://www.w3.org/2003/05/soap-envelope\"\r\n      , message = \"<Envelope xmlns='\"+ns+\"'>\" +\r\n                    \"<Header />\" +\r\n                      \"<Body>\" +\r\n                        \"<GetData xmlns='http://tempuri.org/'>\" +\r\n                          \"<value>123</value>\" +\r\n                        \"</GetData>\" +\r\n                      \"</Body>\" +\r\n                  \"</Envelope>\"\r\n\r\n    proxy.send(message, \"http://tempuri.org/IService/GetData\", function(message, ctx) {\r\n      console.log(ctx)\r\n    })\r\n```````````````\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/yaronn/wcf.js/issues"
  },
  "_id": "wcf.js@0.0.6",
  "dist": {
    "shasum": "7f466663228c173a7c212b73adff73ce4ea3ddbd"
  },
  "_from": "wcf.js@0.0.6",
  "_resolved": "https://registry.npmjs.org/wcf.js/-/wcf.js-0.0.6.tgz"
}
